rfin3 <- rfin2 %>%
slice_head(n = 10),
cols_label(columns=4:6)
rfin3 <- rfin2 %>%
slice_head(n = 10) %>%
cols_label(columns=4:6)
rfin2 <- rfin %>%
cols_label(
id = md("**TDP Number**"),
genotype = md("**Genotype**"),
cult = md("**Cultivation Status**"),
mean = md("**Mean Disease Score**")
)
rfin2
rfin3 <- rfin2 %>%
dplyr::slice_head(n = 10) %>%
cols_hide(columns=4:6)
rfin3 <- cols_hide(rfin2,columns=4:6)
head(rfin3)
rfin3
rfin4 <- rfin3 %>%
dplyr::slice_head(n = 10) %>%
gt()
res <- cj3 %>%
dplyr::select(id, genotype, cult, mean) |>
dplyr::arrange('mean') |>
dplyr::slice_head(n = 10) |>
gt() |>
cols_label(
mean = "**Mean Disease Score**",
id = "**TDP Number**",
cult = "Cultivation Status**",
genotype = "**Genotype**",
.fn = md
)
res
res <- cj3 %>%
dplyr::select(id, genotype, cult, mean) |>
dplyr::arrange(mean) |>
dplyr::slice_head(n = 10) |>
gt() |>
cols_label(
mean = "**Mean Disease Score**",
id = "**TDP Number**",
cult = "Cultivation Status**",
genotype = "**Genotype**",
.fn = md
)
res
res <- cj3 %>%
dplyr::select(id, genotype, cult, mean) |>
dplyr::arrange(mean) |>
dplyr::slice_head(n = 10) |>
gt() |>
cols_label(
mean = "**Mean Disease Score**",
id = "**TDP Number**",
cult = "**Cultivation Status**",
genotype = "**Genotype**",
.fn = md
)
res
sus <- cj3 %>%
dplyr::select(id, genotype, cult, mean) |>
dplyr::arrange(desc(mean)) |>
dplyr::slice_head(n = 10) |>
gt() |>
cols_label(
mean = "**Mean Disease Score**",
id = "**TDP Number**",
cult = "**Cultivation Status**",
genotype = "**Genotype**",
.fn = md
)
sus
sus <- cj3 %>%
dplyr::select(id, genotype, cult, mean) |>
dplyr::arrange(desc(mean)) |>
dplyr::slice_head(n = 10) |>
round(mean, digits=2) |>
gt() |>
cols_label(
mean = "**Mean Disease Score**",
id = "**TDP Number**",
cult = "**Cultivation Status**",
genotype = "**Genotype**",
.fn = md
)
sus <- cj3 %>%
dplyr::select(id, genotype, cult, mean) |>
dplyr::arrange(desc(mean)) |>
dplyr::slice_head(n = 10) |>
format(round(mean, digits=2), nsmall=2) |>
gt() |>
cols_label(
mean = "**Mean Disease Score**",
id = "**TDP Number**",
cult = "**Cultivation Status**",
genotype = "**Genotype**",
.fn = md
)
sus <- cj3 %>%
dplyr::select(id, genotype, cult, mean) |>
dplyr::arrange(desc(mean)) |>
dplyr::slice_head(n = 10) |>
format(round(cj3$mean, digits=2), nsmall=2) |>
gt() |>
cols_label(
mean = "**Mean Disease Score**",
id = "**TDP Number**",
cult = "**Cultivation Status**",
genotype = "**Genotype**",
.fn = md
)
sus
sus <- cj3 %>%
dplyr::select(id, genotype, cult, mean) |>
dplyr::arrange(desc(mean)) |>
dplyr::slice_head(n = 10) |>
format(round(mean, digits=3), nsmall=3) |>
gt() |>
cols_label(
mean = "**Mean Disease Score**",
id = "**TDP Number**",
cult = "**Cultivation Status**",
genotype = "**Genotype**",
.fn = md
)
sus
sus <- cj3 %>%
dplyr::select(id, genotype, cult, mean) |>
dplyr::arrange(desc(mean)) |>
dplyr::slice_head(n = 10) |>
format(mean, digits=3), nsmall=3 |>
gt() |>
cols_label(
mean = "**Mean Disease Score**",
id = "**TDP Number**",
cult = "**Cultivation Status**",
genotype = "**Genotype**",
.fn = md
)
sus <- cj3 %>%
dplyr::select(id, genotype, cult, mean) |>
dplyr::arrange(desc(mean)) |>
dplyr::slice_head(n = 10) |>
format(mean, digits=3) |>
gt() |>
cols_label(
mean = "**Mean Disease Score**",
id = "**TDP Number**",
cult = "**Cultivation Status**",
genotype = "**Genotype**",
.fn = md
)
sus
sus <- cj3 %>%
dplyr::select(id, genotype, cult, mean) |>
dplyr::arrange(desc(mean)) |>
dplyr::slice_head(n = 10) |>
mutate_if(is.numeric, round, digits = 2) |>
gt() |>
cols_label(
mean = "**Mean Disease Score**",
id = "**TDP Number**",
cult = "**Cultivation Status**",
genotype = "**Genotype**",
.fn = md
)
sus
res <- cj3 %>%
dplyr::select(id, genotype, cult, mean) |>
dplyr::arrange(mean) |>
dplyr::slice_head(n = 12) |>
mutate_if(is.numeric, round, digits = 2) |>
gt() |>
tab_header(title = md("###Most Resistant Genotypes###")) |>
cols_label(
mean = "**Mean Disease Score**",
id = "**TDP Number**",
cult = "**Cultivation Status**",
genotype = "**Genotype**",
.fn = md
)
res
)
tab_style(tyle = cell_fill(color = "gray")|>
res <- cj3 %>%
dplyr::select(id, genotype, cult, mean) |>
dplyr::arrange(mean) |>
dplyr::slice_head(n = 12) |>
mutate_if(is.numeric, round, digits = 2) |>
gt() |>
tab_style(tyle = cell_fill(color = "gray")) |>
tab_header(title = md("**Resistant Genotypes**")) |>
cols_label(
mean = "**Mean Disease Score**",
id = "**TDP Number**",
cult = "**Cultivation Status**",
genotype = "**Genotype**",
.fn = md
)
sus
res
res <- cj3 %>%
dplyr::select(id, genotype, cult, mean) |>
dplyr::arrange(mean) |>
dplyr::slice_head(n = 12) |>
mutate_if(is.numeric, round, digits = 2) |>
gt() |>
tab_header(title = md("**Resistant Genotypes**")) |>
cols_label(
mean = "**Mean Disease Score**",
id = "**TDP Number**",
cult = "**Cultivation Status**",
genotype = "**Genotype**",
.fn = md
)
res
sus <- cj3 %>%
dplyr::select(id, genotype, cult, mean) |>
dplyr::arrange(desc(mean)) |>
dplyr::slice_head(n = 12) |>
mutate_if(is.numeric, round, digits = 2) |>
gt() |>
tab_header(title = md("**Susceptible Genotypes**")) |>
cols_label(
mean = "**Mean Disease Score**",
id = "**TDP Number**",
cult = "**Cultivation Status**",
genotype = "**Genotype**",
.fn = md
)
View(rfin2)
sus
res <- cj3 %>%
dplyr::select(id, genotype, cult, mean) |>
dplyr::arrange(mean) |>
dplyr::slice_head(n = 12) |>
mutate_if(is.numeric, round, digits = 2) |>
gt() |>
tab_header(title = md("**Resistant Genotypes**")) |>
cols_label(
mean = "**Mean Disease Score**",
id = "**TDP Number**",
cult = "**Cultivation Status**",
genotype = "**Accession**",
.fn = md
)
res <- cj3 %>%
dplyr::select(id, genotype, cult, mean) |>
dplyr::arrange(mean) |>
dplyr::slice_head(n = 12) |>
mutate_if(is.numeric, round, digits = 2) |>
gt() |>
tab_header(title = md("**Resistant Genotypes**")) |>
cols_label(
mean = "**Mean Disease Score**",
id = "**TDP Number**",
cult = "**Cultivation Status**",
genotype = "**Accession**",
.fn = md
)
sus <- cj3 %>%
dplyr::select(id, genotype, cult, mean) |>
dplyr::arrange(desc(mean)) |>
dplyr::slice_head(n = 12) |>
mutate_if(is.numeric, round, digits = 2) |>
gt() |>
tab_header(title = md("**Susceptible Genotypes**")) |>
cols_label(
mean = "**Mean Disease Score**",
id = "**TDP Number**",
cult = "**Cultivation Status**",
genotype = "**Accession**",
.fn = md
)
res
sus
library(ggplot2)
#violin with error bars
v2 <- ggplot(cj3, aes(x=cult,y=mean,color=cult)) +
geom_violin(scale="area")
v2
#violin with error bars
v2 <- ggplot(cj3, aes(x=cult,y=mean,fill=cult)) +
geom_violin(scale="area")
v2
#violin with scatter included
v2 + geom_jitter(shape=16, position=position_jitter(0.2))
#adding mean median and mode
v2+geom_boxplot(width=0.1)
#violin with scatter included
v2 + geom_jitter(shape=16, position=position_jitter(0.2))
cj4 <- cj[cj$cult %in% c('Landrace', 'Wild'),]
#removing weedy
v3 <- ggplot(cj4, aes(x=cult,y=mean,fill=cult)) +
geom_violin(scale="area")
v3 + geom_jitter(shape=16, position=position_jitter(0.2))
library(wesanderson)
vf <- v3 + geom_jitter(shape=16, position=position_jitter(0.2))
vf+scale_fill_manual(values=wes_palette(n=3, name="Cavalcanti"))
vf+scale_fill_manual(values=wes_palette(n=3, name="GrandBudapest2"))
vff<- vf+scale_fill_manual(values=wes_palette(n=3, name="GrandBudapest2"))
# changing title names
v3 <- ggplot(cj4, aes(x="Cultivation Status",y="Mean Disease Ratings",fill=cult)) +
geom_violin(scale="area")
#removing weedy
v3 <- ggplot(cj4, aes(x=cult,y=mean,fill=cult)) +
geom_violin(scale="area")
# changing title names
v4 <- ggplot(cj4, aes(x="Cultivation Status",y="Mean Disease Ratings",fill=cult)) +
geom_violin(scale="area")
v4
# changing title names
v3 + labs(title = "Disease Scores by Cultivation Status") +
xlab("Cultivation Status")+
ylab("Mean Disease Ratings")
# changing title names
v3 + labs(title = "Disease Ratings by Cultivation Status") +
xlab("Cultivation Status")+
ylab("Mean Disease Ratings")+
scale_fill_discrete(name = "Cultivation Status")
# adding titles and axis labels
vf3 + labs(title = "Disease Ratings by Cultivation Status") +
xlab("Cultivation Status")+
ylab("Mean Disease Ratings")+
scale_fill_discrete(name = "Cultivation Status")
# adding titles and axis labels
vf3 + labs(title = "Disease Ratings by Cultivation Status") +
xlab("Cultivation Status")+
ylab("Mean Disease Ratings")+
scale_fill_discrete(name = "Cultivation Status")
# adding titles and axis labels
vff + labs(title = "Disease Ratings by Cultivation Status") +
xlab("Cultivation Status")+
ylab("Mean Disease Ratings")+
scale_fill_discrete(name = "Cultivation Status")
vff<- vf+scale_fill_manual(values=wes_palette(n=3, name="GrandBudapest2"))
# adding titles and axis labels
vff + labs(title = "Disease Ratings by Cultivation Status") +
xlab("Cultivation Status")+
ylab("Mean Disease Ratings")+
scale_fill_discrete(name = "Cultivation Status")
# adding titles and axis labels
vff + labs(title = "Disease Ratings by Cultivation Status") +
xlab("Cultivation Status")+
ylab("Mean Disease Ratings")+
guides(fill=guide_legend(title="Cultivation Status"))
# adding titles and axis labels
v4 <- vff + labs(title = "Disease Ratings by Cultivation Status") +
xlab("Cultivation Status")+
ylab("Mean Disease Ratings")+
guides(fill=guide_legend(title="Cultivation Status"))
library(gridExtra)
# exporting the graph
ggsave("PRRdsViolin23.png", plot= lastplot(v4))
# exporting the graph
ggsave("PRRdsViolin23.png", plot=(v4))
## Set your working directory
setwd("/Users/jasminehart/Documents/GitHub/EcologicalGenomics23/Transcriptomics/results/")
## Import the libraries that we're likely to need in this session
library(DESeq2)
# Try with new counts table from filtered transcriptome assembly
countsTable <- read.table("salmon.isoform.counts.matrix.filteredAssembly", header=TRUE, row.names=1)
## Set your working directory
setwd("/Users/jasminehart/Documents/GitHub/EcologicalGenomics23/Transcriptomics/data/")
## Import the libraries that we're likely to need in this session
library(DESeq2)
# Try with new counts table from filtered transcriptome assembly
countsTable <- read.table("salmon.isoform.counts.matrix.filteredAssembly", header=TRUE, row.names=1)
head(countsTable)
dim(countsTable)
countsTableRound <- round(countsTable) # bc DESeq2 doesn't like decimals (and Salmon outputs data with decimals)
head(countsTableRound)
#import the sample discription table
conds <- read.delim("ahud_samples_R.txt", header=TRUE, stringsAsFactors = TRUE, row.names=1)
head(conds)
dds <- DESeqDataSetFromMatrix(countData = countsTableRound, colData=conds,
design= ~ treatment)
dim(dds)
# Filter
dds <- dds[rowSums(counts(dds) >= 30) >= 28,]
nrow(dds)
# Subset the DESeqDataSet to the specific level of the "generation" factor
dds_F0 <- subset(dds, select = generation == 'F0')
dim(dds_F0)
# Perform DESeq2 analysis on the subset
dds_F0 <- DESeq(dds_F0)
resultsNames(dds_F0)
res_F0_OWvAM <- results(dds_F0, name="treatment_OW_vs_AM", alpha=0.05)
res_F0_OWvAM <- res_F0_OWvAM[order(res_F0_OWvAM$padj),]
head(res_F0_OWvAM)
[1] "Intercept"           "treatment_OA_vs_AM"  "treatment_OW_vs_AM"  "treatment_OWA_vs_AM"
res_F0_OWvAM <- results(dds_F0, name="treatment_OW_vs_AM", alpha=0.05)
#
res_F0_OWvAM <- res_F0_OWvAM[order(res_F0_OWvAM$padj),]
head(res_F0_OWvAM)
summary(res_F0_OWvAM)
res_F0_OWAvAM <- results(dds_F0, name="treatment_OWA_vs_AM", alpha=0.05)
res_F0_OWAvAM <- res_F0_OWAvAM[order(res_F0_OWAvAM$padj),]
head(res_F0_OWAvAM)
summary(res_F0_OWAvAM)
res_F0_OAvAM <- results(dds_F0, name="treatment_OA_vs_AM", alpha=0.05)
res_F0_OAvAM <- res_F0_OAvAM[order(res_F0_OAvAM$padj),]
head(res_F0_OAvAM)
summary(res_F0_OAvAM)
library(tidyr)
# Make the rownames a separate column called transcriptID and make it all a dataframe
res_F0_OWvAM_df <- data.frame(transcriptID = rownames(res_F0_OWvAM), res_F0_OWvAM)
# Split the "transcriptID" column by double colons and create new columns of the parts
res_F0_OWvAM_df <- separate(res_F0_OWvAM_df, transcriptID, into = c("part1", "part2", "part3", "rest"), sep = "::", remove = FALSE)
# Create a new column by concatenating "part1" and "part2" with double colons in between
res_F0_OWvAM_df$transcriptID_trim <- paste(res_F0_OWvAM_df$part1, res_F0_OWvAM_df$part2, sep = "::")
# Optional: Remove the "part1" and "part2" columns from the dataframe
res_F0_OWvAM_df <- res_F0_OWvAM_df[, !(names(res_F0_OWvAM_df) %in% c("part1", "part2", "part3", "rest"))]
write.table(res_F0_OWvAM_df, file = "res_F0_OWvAM.txt", sep = "\t", row.names = F)   # saves the full original for the records
# Select the two columns we want to save for the GOMWU analysis
selected_columns_OW <- res_F0_OWvAM_df[c("transcriptID_trim", "log2FoldChange")]
# Save the selected columns as a CSV file
write.csv(selected_columns_OW, file = "res_F0_OWvAM_LFC.csv", quote = FALSE, row.names = F) # saves the selected columns for GOMWU
# Make the rownames a separate column called transcriptID and make it all a dataframe
res_F0_OWAvAM_df <- data.frame(transcriptID = rownames(res_F0_OWAvAM), res_F0_OWAvAM)
# Split the "transcriptID" column by double colons and create new columns of the parts
res_F0_OWAvAM_df <- separate(res_F0_OWAvAM_df, transcriptID, into = c("part1", "part2", "part3", "rest"), sep = "::", remove = FALSE)
# Create a new column by concatenating "part1" and "part2" with double colons in between
res_F0_OWAvAM_df$transcriptID_trim <- paste(res_F0_OWAvAM_df$part1, res_F0_OWAvAM_df$part2, sep = "::")
# Optional: Remove the "part1" and "part2" columns from the dataframe
res_F0_OWAvAM_df <- res_F0_OWAvAM_df[, !(names(res_F0_OWAvAM_df) %in% c("part1", "part2", "part3", "rest"))]
write.table(res_F0_OWAvAM_df, file = "res_F0_OWAvAM.txt", sep = "\t", row.names = F)   # saves the full original for the records
# Select the two columns we want to save for the GOMWU analysis
selected_columns_OWA <- res_F0_OWAvAM_df[c("transcriptID_trim", "log2FoldChange")]
# Save the selected columns as a CSV file
write.csv(selected_columns_OWA, file = "res_F0_OWAvAM_LFC.csv", quote = FALSE, row.names = F) # saves the selected columns for GOMWU
# Make the rownames a separate column called transcriptID and make it all a dataframe
res_F0_OAvAM_df <- data.frame(transcriptID = rownames(res_F0_OAvAM), res_F0_OAvAM)
# Split the "transcriptID" column by double colons and create new columns of the parts
res_F0_OAvAM_df <- separate(res_F0_OAvAM_df, transcriptID, into = c("part1", "part2", "part3", "rest"), sep = "::", remove = FALSE)
# Create a new column by concatenating "part1" and "part2" with double colons in between
res_F0_OAvAM_df$transcriptID_trim <- paste(res_F0_OAvAM_df$part1, res_F0_OAvAM_df$part2, sep = "::")
# Optional: Remove the "part1" and "part2" columns from the dataframe
res_F0_OAvAM_df <- res_F0_OAvAM_df[, !(names(res_F0_OAvAM_df) %in% c("part1", "part2", "part3", "rest"))]
write.table(res_F0_OAvAM_df, file = "res_F0_OAvAM.txt", sep = "\t", row.names = F)   # saves the full original for the records
# Select the two columns we want to save for the GOMWU analysis
selected_columns_OA <- res_F0_OAvAM_df[c("transcriptID_trim", "log2FoldChange")]
# Save the selected columns as a CSV file
write.csv(selected_columns_OA, file = "res_F0_OAvAM_LFC.csv", quote = FALSE, row.names = F) # saves the selected columns for GOMWU
################################################################
# First, press command-D on mac or ctrl-shift-H in Rstudio and navigate to the directory containing scripts and input files. Then edit, mark and execute the following bits of code, one after another.
setwd("/Users/jasminehart/Documents/GitHub/EcologicalGenomics23/Transcriptomics/data/GOMWU")
# Edit these to match your data file names:
input="res_F0_OWvAM_LFC.csv" # two columns of comma-separated values: gene id, continuous measure of significance. To perform standard GO enrichment analysis based on Fisher's exact test, use binary measure (0 or 1, i.e., either sgnificant or not).
goAnnotations="trinotate_annotation_GOblastx_onlyanns_onlyGOs_justmergeGeneIDtab34.txt" # two-column, tab-delimited, one line per gene, multiple GO terms separated by semicolon. If you have multiple lines per gene, use nrify_GOtable.pl prior to running this script.
goDatabase="go.obo" # download from http://www.geneontology.org/GO.downloads.ontology.shtml
goDivision="BP" # either MF, or BP, or CC
source("gomwu.functions.R")
gomwuStats(input, goDatabase, goAnnotations, goDivision,
perlPath="perl", # replace with full path to perl executable if it is not in your system's PATH already
largest=0.05,  # a GO category will not be considered if it contains more than this fraction of the total number of genes
smallest=10,   # a GO category should contain at least this many genes to be considered
clusterCutHeight=0.25, # threshold for merging similar (gene-sharing) terms. See README for details.
#	Alternative="g" # by default the MWU test is two-tailed; specify "g" or "l" of you want to test for "greater" or "less" instead.
#	Module=TRUE,Alternative="g" # un-remark this if you are analyzing a SIGNED WGCNA module (values: 0 for not in module genes, kME for in-module genes). In the call to gomwuPlot below, specify absValue=0.001 (count number of "good genes" that fall into the module)
#	Module=TRUE # un-remark this if you are analyzing an UNSIGNED WGCNA module
)
View(gomwuStats)
)
View(gomwuStats)
quartz()
results=gomwuPlot(input,goAnnotations,goDivision,
# absValue=-log(0.05,10),  # genes with the measure value exceeding this will be counted as "good genes". This setting is for signed log-pvalues. Specify absValue=0.001 if you are doing Fisher's exact test for standard GO enrichment or analyzing a WGCNA module (all non-zero genes = "good genes").
absValue=1, # un-remark this if you are using log2-fold changes
level1=0.001, # FDR threshold for plotting. Specify level1=1 to plot all GO categories containing genes exceeding the absValue.
level2=0.0005, # FDR cutoff to print in regular (not italic) font.
level3=0.0001, # FDR cutoff to print in large bold font.
txtsize=1.2,    # decrease to fit more on one page, or increase (after rescaling the plot so the tree fits the text) for better "word cloud" effect
treeHeight=0.5, # height of the hierarchical clustering tree
#	colors=c("dodgerblue2","firebrick1","skyblue2","lightcoral") # these are default colors, un-remar and change if needed
)
png(filename = "dendroGOMWU_BP_lesssig_OAvAM_LFC.png", width = 800, height = 1400, res = 200)
# results above
dev.off()
# text representation of results, with actual adjusted p-values
results[[1]]
pcut=1e-2 # adjusted pvalue cutoff for representative GO
hcut=0.9 # height at which cut the GO terms tree to get "independent groups".
# plotting the GO tree with the cut level (un-remark the next two lines to plot)
plot(results[[2]],cex=0.6)
abline(h=hcut,col="red")
# cutting
ct=cutree(results[[2]],h=hcut)
annots=c();ci=1
for (ci in unique(ct)) {
message(ci)
rn=names(ct)[ct==ci]
obs=grep("obsolete",rn)
if(length(obs)>0) { rn=rn[-obs] }
if (length(rn)==0) {next}
rr=results[[1]][rn,]
bestrr=rr[which(rr$pval==min(rr$pval)),]
best=1
if(nrow(bestrr)>1) {
nns=sub(" .+","",row.names(bestrr))
fr=c()
for (i in 1:length(nns)) { fr=c(fr,eval(parse(text=nns[i]))) }
best=which(fr==max(fr))
}
if (bestrr$pval[best]<=pcut) { annots=c(annots,sub("\\d+\\/\\d+ ","",row.names(bestrr)[best]))}
}
mwus=read.table(paste("MWU",goDivision,input,sep="_"),header=T)
bestGOs=mwus[mwus$name %in% annots,]
bestGOs
