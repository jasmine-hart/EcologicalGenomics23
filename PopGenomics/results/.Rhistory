col=cols[1:K3]
space=0,border=NA,
xlab="Populations",ylab="Admixture proportions",
main=paste0("Red Spruce K=",K3))
cols=c("#377eB8","#EE9B00","#0A9396","#94D2BD","#FFCB69","#005f73","#E26D5C","#AE2012", "#6d597a", "#7EA16B","#d4e09b", "gray70")
#make plot:
barplot(t(q3)[,ord],
col=cols[1:K3]
space=0,border=NA,
xlab="Populations",ylab="Admixture proportions",
main=paste0("Red Spruce K=",K3))
K3=dim(q3)[2] #find the level of k modeled
## order according to pop code
ord<-order(pops[,2])
#make plot:
barplot(t(q3)[,ord],
col=cols[1:K3]
space=0,border=NA,
xlab="Populations",ylab="Admixture proportions",
main=paste0("Red Spruce K=",K3))
q3 <- read.table("allRS_poly.admix.3.Q", sep=" ",header=F)
K3=dim(q3)[2] #find the level of k modeled
## order according to pop code
ord<-order(pops[,2])
#make plot:
barplot(t(q3)[,ord],
col=cols[1:K3]
space=0,border=NA,
xlab="Populations",ylab="Admixture proportions",
main=paste0("Red Spruce K=",K3))
# k=3 attempt
cols=c("#377eB8","#EE9B00","#0A9396","#94D2BD","#FFCB69","#005f73","#E26D5C","#AE2012", "#6d597a", "#7EA16B","#d4e09b", "gray70")
q3 <- read.table("allRS_poly.admix.3.Q", sep=" ",header=F)
K3=dim(q3)[2] #find the level of k modeled
## order according to pop code
ord<-order(pops[,2])
#make plot:
barplot(t(q3)[,ord],
col=cols[1:K3]
space=0,border=NA,
xlab="Populations",ylab="Admixture proportions",
main=paste0("Red Spruce K=",K3))
#make plot:
barplot(t(q3)[,ord],
col=cols[1:K3]
space=0,border=NA,
xlab="Populations",ylab="Admixture proportions",
main=paste0("Red Spruce K=",K3)))
#make plot:
barplot(t(q3)[,ord],
col=cols[1:K3],
space=0,border=NA,
xlab="Populations",ylab="Admixture proportions",
main=paste0("Red Spruce K=",K3))
text(tapply(1:nrow(pops),pops[ord,2],mean),-0.05,unique(pops[ord,2]),xpd=T)
abline(v=cumsum(sapply(unique(pops[ord,3]),function(x){sum(pops[ord,3]==x)})),col=1:2,lwd=1.2)
list.files()
s3<-npyLoad("allRS_poly.selection3.npy")
# convert test statistic to p-value
pval3 <- as.data.frame(1-pchisq(s,1))
names(pval3) = c("p_PC1","p_PC2")
## read positions
p <- read.table("allRS_poly_mafs3.sites",sep="\t",header=T, stringsAsFactors=T)
dim(p)
## read positions
p3 <- read.table("allRS_poly_mafs3.sites",sep="\t",header=T, stringsAsFactors=T)
dim(p3)
## read positions
p3 <- read.table("allRS_poly_mafs3.sites",sep="\t",header=T, stringsAsFactors=T)
## read positions
p3 <- read.table("allRS_poly_mafs3.sites",sep="\t",header=F, stringsAsFactors=T)
## read positions
p3 <- read.table("allRS_poly_mafs3.sites",sep="\t",header=T, stringsAsFactors=T)
## read positions
p3 <- read.table("allRS_poly_mafs3.sites",sep="\t",header=T, stringsAsFactors=T)
library(RcppCNPy)# for reading python numpy (.npy) files
setwd("~/Documents/GitHub/EcologicalGenomics23/PopGenomics/results/")
list.files()
s3<-npyLoad("allRS_poly.selection3.npy")
# convert test statistic to p-value for k3
pval3 <- as.data.frame(1-pchisq(s3,1))
names(pval3) = c("p_PC1","p_PC2")
## read positions
p3 <- read.table("allRS_poly_mafs3.sites",sep="\t",header=T, stringsAsFactors=T)
names(pval3) = c("p_PC1","p_PC2")
head(pval3)
## read positions
p3 <- read.table("allRS_poly_mafs3.sites",sep="\t",header=T, stringsAsFactors=T)
head("allRS_poly_mafs3.sites")
list.files()
## read positions
p3 <- read.table("allRS_poly_mafs3.sites",sep="\t",header=T, stringsAsFactors=T)
## read positions
p3 <- read.table("allRS_poly_mafs3.sites",sep="\t",header=T, stringsAsFactors=T, fill=T)
dim(p3)
p3_filtered = p3[which(p3$kept_sites==1),]
dim(p3_filtered)
# get all the outliers with p-values below some cutoff
cutoff=1e-3
outliers_PC1 <- p3_filtered[which(pval$p_PC1<cutoff),c("chromo","position")]
# how many outlier loci < the cutoff?
dim(outliers_PC1)[1]
# write them out to a file
write.table(outliers_PC1,
"allRS_poly3_outliers_PC1.txt",
sep=":",
quote=F,
row.names=F,
col.names=F)
COV3 <- as.matrix(read.table("allRS_poly3.cov"))
PCA3 <- eigen(COV3)
data3=as.data.frame(PCA3$vectors)
data3=data3[,c(1:2)] # the second number here is the number of PC axes you want to keep
write.table(data,
"allRS_poly3_genPC1_2.txt",
sep="\t",
quote=F,
row.names=F,
col.names=F)
library(raster)
library(FactoMineR)
library(factoextra)
library(corrplot)
bio <- getData("worldclim",var="bio",res=10)
coords <- read.csv("https://www.uvm.edu/~kellrlab/forClass/colebrookSampleMetaData.csv", header=T)
str(p3)
names3 <- read.table("allRS_bam3.list")
names3 <- unlist(strsplit(basename(as.character(names[,1])), split = ".sorted.rmdup.bam"))
names3 <- unlist(strsplit(basename(as.character(names[,2])), split = ".sorted.rmdup.bam"))
names3 <- unlist(strsplit(basename(as.character(names[,3])), split = ".sorted.rmdup.bam"))
names3 <- unlist(strsplit(basename(as.character(names[,0])), split = ".sorted.rmdup.bam"))
View(names3)
names3 <- read.table("allRS_bam.list3")
names3 <- unlist(strsplit(basename(as.character(names[,1])), split = ".sorted.rmdup.bam"))
View(names3)
names3 <- unlist(strsplit(basename(as.character(names[1,])), split = ".sorted.rmdup.bam"))
names3 <- unlist(strsplit(basename(as.character(names[,1])), split = ".sorted.rmdup.bam"))
split = strsplit(names, "_")
names3 <- unlist(strsplit(basename(as.character(names[,1])), split = ".sorted.rmdup.bam"))
names3 <- unlist(strsplit(basename(as.character(names3[,1])), split = ".sorted.rmdup.bam"))
split = strsplit(names, "_")
pops3 <- data.frame(names[1:95], do.call(rbind, split[1:95]))
names(pops3) = c("Ind", "Pop", "Row", "Col")
names3(pops3) = c("Ind", "Pop", "Row", "Col")
pops3 <- data.frame(names[1:95], do.call(rbind, split[1:95]))
names3(pops3) = c("Ind", "Pop", "Row", "Col")
names3 <- read.table("allRS_bam.list3")
names3 <- unlist(strsplit(basename(as.character(names3[,1])), split = ".sorted.rmdup.bam"))
split = strsplit(names, "_")
pops3 <- data.frame(names[1:95], do.call(rbind, split[1:95]))
names3(pops3) = c("Ind", "Pop", "Row", "Col")
head(pops3)
head(names3)
names3 <- unlist(strsplit(basename(as.character(names3[,1])), split = ".sorted.rmdup.bam"))
names3 <- read.table("allRS_bam.list3")
names3 <- unlist(strsplit(basename(as.character(names3[,1])), split = ".sorted.rmdup.bam"))
split = strsplit(names, "_")
pops3 <- data.frame(names[1:95], do.call(rbind, split[1:95]))
pops3 <- data.frame(names3[1:95], do.call(rbind, split[1:95]))
names3(pops3) = c("Ind", "Pop", "Row", "Col")
names3 <- read.table("allRS_bam.list3")
names3 <- unlist(strsplit(basename(as.character(names3[,1])), split = ".sorted.rmdup.bam"))
split = strsplit(names, "_")
pops3 <- data.frame(names3[1:95], do.call(rbind, split[1:95]))
names3(pops3) = c("Ind", "Pop", "Row", "Col")
names(pops3) = c("Ind", "Pop", "Row", "Col")
angsd_coords <- merge(pops3, coords, by.x="Ind", by.y="Tree")
points3 <- SpatialPoints(angsd_coords[c("Longitude","Latitude")])
clim <- extract(bio,points)
library(raster)
library(FactoMineR)
library(factoextra)
library(corrplot)
clim <- extract(bio,points)
angsd_coords_clim <- cbind.data.frame(angsd_coords,clim)
clim <- extract(bio,points)
bio <- getData("worldclim",var="bio",res=10)
install.packages("geodata")
library(geodata)
bio <- getData("worldclim",var="bio",res=10)
coords <- read.csv("https://www.uvm.edu/~kellrlab/forClass/colebrookSampleMetaData.csv", header=T)
clim <- extract(bio,points3)
angsd_coords_clim <- cbind.data.frame(angsd_coords,clim)
str(angsd_coords_clim)
clim_PCA = PCA(angsd_coords_clim[,15:33], graph=T)
fviz_eig(clim_PCA)
fviz_pca_biplot(clim_PCA,
geom.ind="point",
col.ind = angsd_coords_clim$Latitude,
gradient.cols = c("#00AFBB", "#E7B800", "#FC4E07"),
title="Climate PCA (Bioclim)",
legend.title="Latitude")
dimdesc(clim_PCA)[1:2]
write.table(scale(angsd_coords_clim["bio12"]),
"allRS_bio12.txt",
sep="\t",
quote=F,
row.names = F,
col.names=F)
write.table(scale(angsd_coords_clim["bio10"]),
"allRS_bio10.txt",
sep="\t",
quote=F,
row.names = F,
col.names=F)
s<-npyLoad("allRS_poly.selection.npy")
# convert test statistic to p-value
pval <- as.data.frame(1-pchisq(s,1))
names(pval) = c("p_PC1","p_PC2")
## read positions
p <- read.table("allRS_poly_mafs.sites",sep="\t",header=T, stringsAsFactors=T)
dim(p)
p_filtered = p[which(p$kept_sites==1),]
dim(p_filtered)
## make manhattan plot
plot(-log10(pval3$p_PC1),
col=p_filtered$chromo,
xlab="Position",
ylab="-log10(p-value)",
main="Selection outliers: pcANGSD e=2 (K3)")
plot(-log10(pval3$p_PC1[2e05:2.01e05]),
col=p_filtered$chromo,
xlab="Position",
ylab="-log10(p-value)",
main="Selection outliers: pcANGSD e=3 (K3)")
## make manhattan plot
plot(-log10(pval3$p_PC1),
col=p3_filtered$chromo,
xlab="Position",
ylab="-log10(p-value)",
main="Selection outliers: pcANGSD e=3 (K3)")
plot(-log10(pval3$p_PC1[2e05:2.01e05]),
col=p3_filtered$chromo,
xlab="Position",
ylab="-log10(p-value)",
main="Selection outliers: pcANGSD e=3 (K3)")
# get the contig with the lowest p-value for selection
sel_contig <- p3_filtered[which(pval==min(pval$p_PC1)),c("chromo","position")]
sel_contig
# get the contig with the lowest p-value for selection
sel_contig <- p3_filtered[which(pval3==min(pval3$p_PC1)),c("chromo","position")]
sel_contig
# get the contig with the lowest p-value for selection
sel_contig3 <- p3_filtered[which(pval3==min(pval3$p_PC1)),c("chromo","position")]
sel_contig3
# get all the outliers with p-values below some cutoff
cutoff=1e-3   # equals a 1 in 5,000 probability
outlier_contigs3 <- p3_filtered[which(pval<cutoff),c("chromo","position")]
outlier_contigs3
# how many outlier loci < the cutoff?
dim(outlier_contigs3)[1]
# get the contig with the lowest p-value for selection
sel_contig3 <- p3_filtered[which(pval3==min(pval3$p3_PC1)),c("chromo","position")]
sel_contig3
## make manhattan plot
plot(-log10(pval3$p3_PC1),
col=p3_filtered$chromo,
xlab="Position",
ylab="-log10(p-value)",
main="Selection outliers: pcANGSD e=3 (K3)")
## make manhattan plot
plot(-log10(pval3$p_PC1),
col=p3_filtered$chromo,
xlab="Position",
ylab="-log10(p-value)",
main="Selection outliers: pcANGSD e=3 (K3)")
outliers_PC13 <- p3_filtered[which(pval3$p_PC1<cutoff),c("chromo","position")]
# how many outlier loci < the cutoff?
dim(outliers_PC13)[1]
## make manhattan plot
plot(-log10(pval3$p_PC1),
col=p3_filtered$chromo,
xlab="Position",
ylab="-log10(p-value)",
main="Selection outliers: pcANGSD e=3 (K3)")
plot(-log10(pval3$p_PC1[2e05:2.01e05]),
col=p3_filtered$chromo,
xlab="Position",
ylab="-log10(p-value)",
main="Selection outliers: pcANGSD e=3 (K3)")
# get the contig with the lowest p-value for selection
sel_contig3 <- p3_filtered[which(pval3==min(pval3$p_PC1)),c("chromo","position")]
sel_contig3
PCA3 <- eigen(COV3)
data3=as.data.frame(PCA3$vectors)
data3=data3[,c(1:2)] # the second number here is the number of PC axes you want to keep
write.table(data,
"allRS_poly3_genPC1_2.txt",
sep="\t",
quote=F,
row.names=F,
col.names=F)
write.table(data3,
"allRS_poly4_genPC1_2.txt",
sep="\t",
quote=F,
row.names=F,
col.names=F)
#output to bash
write.table(unique(outlier_contigs3$chromo),
"allRS_poly3_PC1_outlier_contigs.txt",
sep="\t",
quote=F,
row.names=F,
col.names=F)
# get the contig with the lowest p-value for selection
sel_contig3 <- p3_filtered[which(pval3==min(pval3$p_PC1)),c("chromo","position")]
sel_contig3
# get all the outliers with p-values below some cutoff
cutoff=1e-3   # equals a 1 in 5,000 probability
outlier_contigs3 <- p3_filtered[which(pval3<cutoff),c("chromo","position")]
outlier_contigs3
# how many outlier loci < the cutoff?
dim(outlier_contigs3)[1]
# how many unique contigs harbor outlier loci?
length(unique(outlier_contigs3$chromo))
outliers_PC13 <- p3_filtered[which(pval3$p_PC1<cutoff),c("chromo","position")]
# how many outlier loci < the cutoff?
dim(outliers_PC13)[1]
p3_filtered = p3[which(p3$kept_sites==1),]
dim(p3_filtered)
# get all the outliers with p-values below some cutoff
cutoff=1e-3
outliers_PC13 <- p3_filtered[which(pval3$p_PC1<cutoff),c("chromo","position")]
# how many outlier loci < the cutoff?
dim(outliers_PC13)[1]
clim_PCA3 = PCA3(angsd_coords_clim[,15:33], graph=T)
PCA3 <- eigen(COV3)
clim_PCA3 = PCA3(angsd_coords_clim[,15:33], graph=T)
clim_PCA = PCA3(angsd_coords_clim[,15:33], graph=T)
angsd_coords <- merge(pops3, coords, by.x="Ind", by.y="Tree")
points3 <- SpatialPoints(angsd_coords[c("Longitude","Latitude")])
clim <- extract(bio,points3)
angsd_coords_clim <- cbind.data.frame(angsd_coords,clim)
str(angsd_coords_clim)
clim_PCA = PCA(angsd_coords_clim[,15:33], graph=T)
fviz_eig(clim_PCA)
fviz_pca_biplot(clim_PCA,
geom.ind="point",
col.ind = angsd_coords_clim$Latitude,
gradient.cols = c("#00AFBB", "#E7B800", "#FC4E07"),
title="Climate PCA (Bioclim)",
legend.title="Latitude")
dimdesc(clim_PCA)[1:2]
write.table(scale(angsd_coords_clim["bio12"]),
"allRS_bio12.txt",
sep="\t",
quote=F,
row.names = F,
col.names=F)
p3_filtered = p3[which(p3$kept_sites==1),]
dim(p3_filtered)
# get all the outliers with p-values below some cutoff
cutoff=1e-3
outliers_PC13 <- p3_filtered[which(pval3$p_PC1<cutoff),c("chromo","position")]
# how many outlier loci < the cutoff?
dim(outliers_PC13)[1]
# get the contig with the lowest p-value for selection
sel_contig3 <- p3_filtered[which(pval3==min(pval3$p_PC1)),c("chromo","position")]
sel_contig3
# get all the outliers with p-values below some cutoff
cutoff=1e-3   # equals a 1 in 5,000 probability
outlier_contigs3 <- p3_filtered[which(pval3<cutoff),c("chromo","position")]
outlier_contigs3
# how many outlier loci < the cutoff?
dim(outlier_contigs3)[1]
# how many unique contigs harbor outlier loci?
length(unique(outlier_contigs3$chromo))
# write them out to a file
write.table(outliers_PC13,
"allRS_poly3_outliers_PC1.txt",
sep=":",
quote=F,
row.names=F,
col.names=F)
COV3 <- as.matrix(read.table("allRS_poly3.cov"))
PCA3 <- eigen(COV3)
data3=as.data.frame(PCA3$vectors)
data3=data3[,c(1:2)] # the second number here is the number of PC axes you want to keep
write.table(data3,
"allRS_poly4_genPC1_2.txt",
sep="\t",
quote=F,
row.names=F,
col.names=F)
names3 <- read.table("allRS_bam.list3")
names3 <- unlist(strsplit(basename(as.character(names3[,1])), split = ".sorted.rmdup.bam"))
split = strsplit(names, "_")
pops3 <- data.frame(names3[1:95], do.call(rbind, split[1:95]))
names(pops3) = c("Ind", "Pop", "Row", "Col")
angsd_coords <- merge(pops3, coords, by.x="Ind", by.y="Tree")
points3 <- SpatialPoints(angsd_coords[c("Longitude","Latitude")])
clim <- extract(bio,points3)
angsd_coords_clim <- cbind.data.frame(angsd_coords,clim)
str(angsd_coords_clim)
clim_PCA = PCA(angsd_coords_clim[,15:33], graph=T)
fviz_eig(clim_PCA)
fviz_pca_biplot(clim_PCA,
geom.ind="point",
col.ind = angsd_coords_clim$Latitude,
gradient.cols = c("#00AFBB", "#E7B800", "#FC4E07"),
title="Climate PCA (Bioclim)",
legend.title="Latitude")
dimdesc(clim_PCA)[1:2]
write.table(scale(angsd_coords_clim["bio12"]),
"allRS3_bio12.txt",
sep="\t",
quote=F,
row.names = F,
col.names=F)
write.table(scale(angsd_coords_clim["bio10"]),
"allRS3_bio10.txt",
sep="\t",
quote=F,
row.names = F,
col.names=F)
clim_PCA = PCA(angsd_coords_clim[,15:33], graph=T)
fviz_pca_biplot(clim_PCA,
geom.ind="point",
col.ind = angsd_coords_clim$Latitude,
gradient.cols = c("#00AFBB", "#E7B800", "#FC4E07"),
title="Climate PCA (Bioclim)",
legend.title="Latitude")
fviz_eig(clim_PCA)
sel_contig3
outlier_contigs3 <- p3_filtered[which(pval3<cutoff),c("chromo","position")]
outlier_contigs3
# how many outlier loci < the cutoff?
dim(outlier_contigs3)[1]
# how many unique contigs harbor outlier loci?
length(unique(outlier_contigs3$chromo))
# k=3 attempt
cols=c("#377eB8","#EE9B00","#0A9396","#94D2BD","#FFCB69","#005f73","#E26D5C","#AE2012", "#6d597a", "#7EA16B","#d4e09b", "gray70")
q3 <- read.table("allRS_poly.admix.3.Q", sep=" ",header=F)
K3=dim(q3)[2] #find the level of k modeled
## order according to pop code
ord<-order(pops[,2])
#make plot:
barplot(t(q3)[,ord],
col=cols[1:K3],
space=0,border=NA,
xlab="Populations",ylab="Admixture proportions",
main=paste0("Red Spruce K=",K3))
text(tapply(1:nrow(pops),pops[ord,2],mean),-0.05,unique(pops[ord,2]),xpd=T)
abline(v=cumsum(sapply(unique(pops[ord,3]),function(x){sum(pops[ord,3]==x)})),col=1:2,lwd=1.2)
## read positions
p3 <- read.table("allRS_poly_mafs3.sites",sep="\t",header=T, stringsAsFactors=T, fill=T)
dim(p3)
p3_filtered = p3[which(p3$kept_sites==1),]
dim(p3_filtered)
# get all the outliers with p-values below some cutoff
cutoff=1e-3
outliers_PC13 <- p3_filtered[which(pval3$p_PC1<cutoff),c("chromo","position")]
# how many outlier loci < the cutoff?
dim(outliers_PC13)[1]
## make manhattan plot
plot(-log10(pval3$p_PC1),
col=p3_filtered$chromo,
xlab="Position",
ylab="-log10(p-value)",
main="Selection outliers: pcANGSD e=3 (K3)")
plot(-log10(pval3$p_PC1[2e05:2.01e05]),
col=p3_filtered$chromo,
xlab="Position",
ylab="-log10(p-value)",
main="Selection outliers: pcANGSD e=3 (K3)")
plot(-log10(pval3$p_PC1[2e05:2.01e05]),
col=p3_filtered$chromo,
xlab="Position",
ylab="-log10(p-value)",
main="Selection outliers: pcANGSD e=3 (K3)")
# get the contig with the lowest p-value for selection
sel_contig3 <- p3_filtered[which(pval3==min(pval3$p_PC1)),c("chromo","position")]
sel_contig3
# get all the outliers with p-values below some cutoff
cutoff=1e-3   # equals a 1 in 5,000 probability
outlier_contigs3 <- p3_filtered[which(pval3<cutoff),c("chromo","position")]
outlier_contigs3
# how many outlier loci < the cutoff?
dim(outlier_contigs3)[1]
# how many unique contigs harbor outlier loci?
length(unique(outlier_contigs3$chromo))
COV3 <- as.matrix(read.table("allRS_poly3.cov"))
PCA3 <- eigen(COV3)
data3=as.data.frame(PCA3$vectors)
data3=data3[,c(1:2)] # the second number here is the number of PC axes you want to keep
View(p3)
## make manhattan plot
plot(-log10(pval3$p_PC1),
col=p3_filtered$chromo,
xlab="Position",
ylab="-log10(p-value)",
main="Selection outliers: pcANGSD e=3 (K3)")
#make plot:
barplot(t(q3)[,ord],
col=cols[1:K3],
space=0,border=NA,
xlab="Populations",ylab="Admixture proportions",
main=paste0("Red Spruce Admixture K=",K3))
text(tapply(1:nrow(pops),pops[ord,2],mean),-0.05,unique(pops[ord,2]),xpd=T)
q3 <- read.table("allRS_poly.admix.3.Q", sep=" ",header=F)
K3=dim(q3)[2] #find the level of k modeled
## order according to pop code
ord<-order(pops[,2])
#make plot:
barplot(t(q3)[,ord],
col=cols[1:K3],
space=0,border=NA,
xlab="Populations",ylab="Admixture proportions",
main=paste0("Red Spruce Admixture K=",K3))
text(tapply(1:nrow(pops),pops[ord,2],mean),-0.05,unique(pops[ord,2]),xpd=T)
source("~/Documents/GitHub/EcologicalGenomics23/PopGenomics/results/HW1EcoGen.R", echo=TRUE)
