_HiStOrY_V2_
install.packages(c("backports", "broom", "class", "cli", "cpp11", "crayon", "data.table", "DBI", "digest", "dtplyr", "fansi", "foreign", "fs", "generics", "glue", "graphlayouts", "hms", "htmltools", "igraph", "jsonlite", "knitr", "lifecycle", "lubridate", "MASS", "Matrix", "mime", "nlme", "nnet", "openssl", "pillar", "Rcpp", "RcppArmadillo", "readr", "rlang", "rmarkdown", "rvest", "spatial", "stringi", "tibble", "tidyr", "tinytex", "tzdb", "uuid", "viridis", "vroom", "withr", "xfun", "xml2"))
install.packages(c("backports", "broom", "class", "cli", "cpp11", "crayon", "data.table", "DBI", "digest", "dtplyr", "fansi", "foreign", "fs", "generics", "glue", "graphlayouts", "hms", "htmltools", "igraph", "jsonlite", "knitr", "lifecycle", "lubridate", "MASS", "Matrix", "mime", "nlme", "nnet", "openssl", "pillar", "Rcpp", "RcppArmadillo", "readr", "rlang", "rmarkdown", "rvest", "spatial", "stringi", "tibble", "tidyr", "tinytex", "tzdb", "uuid", "viridis", "vroom", "withr", "xfun", "xml2"))
install.packages(c("backports", "broom", "class", "cli", "cpp11", "crayon", "data.table", "DBI", "digest", "dtplyr", "fansi", "foreign", "fs", "generics", "glue", "graphlayouts", "hms", "htmltools", "igraph", "jsonlite", "knitr", "lifecycle", "lubridate", "MASS", "Matrix", "mime", "nlme", "nnet", "openssl", "pillar", "Rcpp", "RcppArmadillo", "readr", "rlang", "rmarkdown", "rvest", "spatial", "stringi", "tibble", "tidyr", "tinytex", "tzdb", "uuid", "viridis", "vroom", "withr", "xfun", "xml2"))
install.packages(c("backports", "broom", "class", "cli", "cpp11", "crayon", "data.table", "DBI", "digest", "dtplyr", "fansi", "foreign", "fs", "generics", "glue", "graphlayouts", "hms", "htmltools", "igraph", "jsonlite", "knitr", "lifecycle", "lubridate", "MASS", "Matrix", "mime", "nlme", "nnet", "openssl", "pillar", "Rcpp", "RcppArmadillo", "readr", "rlang", "rmarkdown", "rvest", "spatial", "stringi", "tibble", "tidyr", "tinytex", "tzdb", "uuid", "viridis", "vroom", "withr", "xfun", "xml2"))
install.packages(c("backports", "broom", "class", "cli", "cpp11", "crayon", "data.table", "DBI", "digest", "dtplyr", "fansi", "foreign", "fs", "generics", "glue", "graphlayouts", "hms", "htmltools", "igraph", "jsonlite", "knitr", "lifecycle", "lubridate", "MASS", "Matrix", "mime", "nlme", "nnet", "openssl", "pillar", "Rcpp", "RcppArmadillo", "readr", "rlang", "rmarkdown", "rvest", "spatial", "stringi", "tibble", "tidyr", "tinytex", "tzdb", "uuid", "viridis", "vroom", "withr", "xfun", "xml2"))
install.packages(c("backports", "broom", "class", "cli", "cpp11", "crayon", "data.table", "DBI", "digest", "dtplyr", "fansi", "foreign", "fs", "generics", "glue", "graphlayouts", "hms", "htmltools", "igraph", "jsonlite", "knitr", "lifecycle", "lubridate", "MASS", "Matrix", "mime", "nlme", "nnet", "openssl", "pillar", "Rcpp", "RcppArmadillo", "readr", "rlang", "rmarkdown", "rvest", "spatial", "stringi", "tibble", "tidyr", "tinytex", "tzdb", "uuid", "viridis", "vroom", "withr", "xfun", "xml2"))
install.packages(c("backports", "broom", "class", "cli", "cpp11", "crayon", "data.table", "DBI", "digest", "dtplyr", "fansi", "foreign", "fs", "generics", "glue", "graphlayouts", "hms", "htmltools", "igraph", "jsonlite", "knitr", "lifecycle", "lubridate", "MASS", "Matrix", "mime", "nlme", "nnet", "openssl", "pillar", "Rcpp", "RcppArmadillo", "readr", "rlang", "rmarkdown", "rvest", "spatial", "stringi", "tibble", "tidyr", "tinytex", "tzdb", "uuid", "viridis", "vroom", "withr", "xfun", "xml2"))
install.packages(c("backports", "broom", "class", "cli", "cpp11", "crayon", "data.table", "DBI", "digest", "dtplyr", "fansi", "foreign", "fs", "generics", "glue", "graphlayouts", "hms", "htmltools", "igraph", "jsonlite", "knitr", "lifecycle", "lubridate", "MASS", "Matrix", "mime", "nlme", "nnet", "openssl", "pillar", "Rcpp", "RcppArmadillo", "readr", "rlang", "rmarkdown", "rvest", "spatial", "stringi", "tibble", "tidyr", "tinytex", "tzdb", "uuid", "viridis", "vroom", "withr", "xfun", "xml2"))
install.packages(c("backports", "broom", "class", "cli", "cpp11", "crayon", "data.table", "DBI", "digest", "dtplyr", "fansi", "foreign", "fs", "generics", "glue", "graphlayouts", "hms", "htmltools", "igraph", "jsonlite", "knitr", "lifecycle", "lubridate", "MASS", "Matrix", "mime", "nlme", "nnet", "openssl", "pillar", "Rcpp", "RcppArmadillo", "readr", "rlang", "rmarkdown", "rvest", "spatial", "stringi", "tibble", "tidyr", "tinytex", "tzdb", "uuid", "viridis", "vroom", "withr", "xfun", "xml2"))
install.packages(c("backports", "broom", "class", "cli", "cpp11", "crayon", "data.table", "DBI", "digest", "dtplyr", "fansi", "foreign", "fs", "generics", "glue", "graphlayouts", "hms", "htmltools", "igraph", "jsonlite", "knitr", "lifecycle", "lubridate", "MASS", "Matrix", "mime", "nlme", "nnet", "openssl", "pillar", "Rcpp", "RcppArmadillo", "readr", "rlang", "rmarkdown", "rvest", "spatial", "stringi", "tibble", "tidyr", "tinytex", "tzdb", "uuid", "viridis", "vroom", "withr", "xfun", "xml2"))
install.packages(c("backports", "broom", "class", "cli", "cpp11", "crayon", "data.table", "DBI", "digest", "dtplyr", "fansi", "foreign", "fs", "generics", "glue", "graphlayouts", "hms", "htmltools", "igraph", "jsonlite", "knitr", "lifecycle", "lubridate", "MASS", "Matrix", "mime", "nlme", "nnet", "openssl", "pillar", "Rcpp", "RcppArmadillo", "readr", "rlang", "rmarkdown", "rvest", "spatial", "stringi", "tibble", "tidyr", "tinytex", "tzdb", "uuid", "viridis", "vroom", "withr", "xfun", "xml2"))
install.packages(c("backports", "broom", "class", "cli", "cpp11", "crayon", "data.table", "DBI", "digest", "dtplyr", "fansi", "foreign", "fs", "generics", "glue", "graphlayouts", "hms", "htmltools", "igraph", "jsonlite", "knitr", "lifecycle", "lubridate", "MASS", "Matrix", "mime", "nlme", "nnet", "openssl", "pillar", "Rcpp", "RcppArmadillo", "readr", "rlang", "rmarkdown", "rvest", "spatial", "stringi", "tibble", "tidyr", "tinytex", "tzdb", "uuid", "viridis", "vroom", "withr", "xfun", "xml2"))
install.packages(c("backports", "broom", "class", "cli", "cpp11", "crayon", "data.table", "DBI", "digest", "dtplyr", "fansi", "foreign", "fs", "generics", "glue", "graphlayouts", "hms", "htmltools", "igraph", "jsonlite", "knitr", "lifecycle", "lubridate", "MASS", "Matrix", "mime", "nlme", "nnet", "openssl", "pillar", "Rcpp", "RcppArmadillo", "readr", "rlang", "rmarkdown", "rvest", "spatial", "stringi", "tibble", "tidyr", "tinytex", "tzdb", "uuid", "viridis", "vroom", "withr", "xfun", "xml2"))
install.packages('tinytex')
library(tinytex)
install.packages('patchwork')
library(tidyverse)
install.packages('tidyverse ')
install.packages('tidyverse')
install.packages("tidyverse")
install.packages("qtl")
library(readxl)
X_PRRFinalSelections_Map2023_Final <- read_excel("Documents/~$PRRFinalSelections+Map2023_Final.xlsx")
View(X_PRRFinalSelections_Map2023_Final)
library(readxl)
RDocument2023Pythium <- read_excel("Documents/Pythium2023/RDocument2023Pythium.xlsx")
View(RDocument2023Pythium)
library(tidyverse)
head(mydata)
rename(RDocument2023Pythium) -> mydata
head(mydata)
library(tidyverse)
library(ggplot2)
view(mydata)
rename("Disease Scores (1-9) (21-days)", data=mydata)
library("dyplr")
library(dpylr)
library("dpylr")
library(dbplyr)
commit
py1 <- mutate(mydata, meandis = rowMeans(select(mydata,9:17), na.rm=TRUE)))
py1 <- mutate(mydata, meandis = rowMeans(select(mydata,9:17), na.rm=TRUE))
py1 <- mutate(mydata, meandis = rowMeans(select(mydata,9:17), na.rm=FALSE))
py1
py1 <- mydata
py1 %>%
mutate(DMean = rowMeans(select(py1, "Disease Scores (1-9) (21 days)":17),na.rm=TRUE)))
py1 %>%
mutate(DMean = rowMeans(select(py1, "Disease Scores (1-9) (21 days)":17),na.rm=TRUE))
py1 %>%
mutate(DMean = rowMeans(select(py1, 9:17),na.rm=TRUE))
is_numeric(py1, 9)
is_numeric(py1, "Disease Scores (1-9) (21 days))
is_numeric(py1, "Disease Scores (1-9) (21 days)")
is_numeric(py1, "Disease Scores (1-9)(21 days)")
is_numeric(py1)
py2 <- coalesce(py1, 9:17)
py2 <- as.numeric(py1, 9:17)
py2 <- as.numeric(py1, 9)
py2 <- as.numeric(py1, "Disease Scores (1-9) (21 days)")
as.numeric(unlist(py1))
head(py1)
as.numeric(py1)
as.numeric(unlist(py1))
py2 <- as.numeric(unlist(py2))
py2
py2 <- as.numeric(unlist(py2))
py2 <- as.numeric(unlist(py1))
py2
head(py2)
py3 <- as.numeric(py1,"Disease Scores (1-9) (21 days)")
library(RcppCNPy)
install.packages("RcppCNPy")
install.packages("xcrun")
library(RcppCNPy)
library(rlang)
install.packages("RccpCNPy")
library(RcppCNPy)
install.packages("RcppCNPy")
library(RcppCNPy)
install.packages(c("askpass", "bit", "blob", "boot", "broom", "bslib", "cachem", "callr", "car", "checkmate", "class", "cli", "clipr", "cluster", "codetools", "colorspace", "commonmark", "cpp11", "crayon", "credentials", "curl", "data.table", "DBI", "dbplyr", "desc", "digest", "dplyr", "dtplyr", "evaluate", "extrafont", "fansi", "farver", "fastmap", "fontawesome", "forcats", "foreign", "fs", "gapminder", "gargle", "gdtools", "generics", "ggforce", "ggplot2", "ggpubr", "ggraph", "ggrepel", "ggsci", "ggsignif", "glue", "googledrive", "googlesheets4", "graphlayouts", "gtable", "haven", "hexbin", "highr", "hms", "htmltools", "htmlwidgets", "httpuv", "httr", "igraph", "isoband", "jsonlite", "KernSmooth", "knitr", "labeling", "later", "latex2exp", "lattice", "learnr", "lifecycle", "lme4", "lubridate", "magrittr", "maptools", "markdown", "MASS", "Matrix", "MatrixModels", "mgcv", "minqa", "modelr", "nlme", "nloptr", "nnet", "openssl", "patchwork", "pbkrtest", "permute", "pillar", "pkgload", "plotly", "plyr", "polyclip", "polynom", "pracma", "prettyunits", "processx", "promises", "ps", "purrr", "quantreg", "RColorBrewer", "Rcpp", "RcppArmadillo", "RcppEigen", "readr", "readxl", "rematch", "renv", "reprex", "rlang", "rmarkdown", "rpart", "rprojroot", "rstatix", "rstudioapi", "Rttf2pt1", "rvest", "sass", "scales", "shiny", "sourcetools", "sp", "spatial", "stringi", "stringr", "survival", "sys", "testthat", "tibble", "tidygraph", "tidyr", "tidyselect", "tidyverse", "tinytex", "tweenr", "tzdb", "utf8", "uuid", "vctrs", "vegan", "viridis", "viridisLite", "vroom", "waldo", "withr", "xfun", "xml2", "yaml"))
install.packages("RcppCNPy")
tools/installpackages/installtolibrary/(change_it_to)c:programfiles/r/r-351/library
install.packages("RcppCNPy")
install.packages("xcrun")
library (Rcpp)
install.packages("RcppCNPy")
install.packages("RccCNPy")
install.packages("RcppCNPy")
setRepositories("RcppCNPy")
setRepositories()
RcppCNPy
"RcppCNPy"
install.packages("raster")
install.packages("FactoMineR")
install.packages("RcppCNPy")
install.packages("raster")
install.packages("FactoMineR")
install.packages("factoextra")
install.packages("corrplot")
library(RcppCNPy) # for reading python numpy (.npy) files
setwd("~/Users/jasminehart/Documents/GitHub/EcologicalGenomics23/PopGenomics/pcangsd/")
setwd("~/Documents/GitHub/EcologicalGenomics23/PopGenomics/results/")
list.files()
setwd("~/Documents/GitHub/EcologicalGenomics23/PopGenomics/results/")
list.files()
s <- npyLoad("allRS_poly.selection.npy")
# convert test statistic to p-value
pval <- as.data.frame(1-pchisq(s,1))
names(pval) = "p_PC1"
## read positions
p <- read.table("allRS_poly_mafs.sites",sep="\t",header=T, stringsAsFactors=T)
dim(p)
p_filtered = p[which(p$kept_sites==1),]
dim(p_filtered)
## make manhattan plot
plot(-log10(pval$p_PC1),
col=p_filtered$chromo,
xlab="Position",
ylab="-log10(p-value)",
main="Selection outliers: pcANGSD e=1 (K2)")
plot(-log10(pval$p_PC1[2e05:2.01e05]),
col=p_filtered$chromo,
xlab="Position",
ylab="-log10(p-value)",
main="Selection outliers: pcANGSD e=1 (K2)")
# get the contig with the lowest p-value for selection
sel_contig <- p_filtered[which(pval==min(pval$p_PC1)),c("chromo","position")]
sel_contig
# get all the outliers with p-values below some cutoff
cutoff=1e-3   # equals a 1 in 5,000 probability
outlier_contigs <- p_filtered[which(pval<cutoff),c("chromo","position")]
outlier_contigs
# how many outlier loci < the cutoff?
dim(outlier_contigs)[1]
# how many unique contigs harbor outlier loci?
length(unique(outlier_contigs$chromo))
library(RcppCNPy)# for reading python numpy (.npy) files
setwd("~/Documents/GitHub/EcologicalGenomics23/PopGenomics/results/")
list.files()
s<-npyLoad("allRS_poly.selection.npy")
# convert test statistic to p-value
pval <- as.data.frame(1-pchisq(s,1))
names(pval) = c("p_PC1","p_PC2")
## read positions
p <- read.table("allRS_poly_mafs.sites",sep="\t",header=T, stringsAsFactors=T)
dim(p)
p_filtered = p[which(p$kept_sites==1),]
dim(p_filtered)
# get all the outliers with p-values below some cutoff
cutoff=1e-3
outliers_PC1 <- p_filtered[which(pval$p_PC1<cutoff),c("chromo","position")]
# how many outlier loci < the cutoff?
dim(outliers_PC1)[1]
# write them out to a file
write.table(outliers_PC1,
"allRS_poly_outliers_PC1.txt",
sep=":",
quote=F,
row.names=F,
col.names=F)
COV <- as.matrix(read.table("allRS_poly.cov"))
PCA <- eigen(COV)
data=as.data.frame(PCA$vectors)
data=data[,c(1:2)] # the second number here is the number of PC axes you want to keep
write.table(data,
"allRS_poly_genPC1_2.txt",
sep="\t",
quote=F,
row.names=F,
col.names=F)
library(raster)
library(FactoMineR)
library(raster)
library(factoextra)
library(corrplot)
setwd("~/Documents/GitHub/EcologicalGenomics23/PopGenomics/results/")
bio <- getData("worldclim",var="bio",res=10)
coords <- read.csv("https://www.uvm.edu/~kellrlab/forClass/colebrookSampleMetaData.csv", header=T)
names <- read.table("allRS_bam.list")
names <- unlist(strsplit(basename(as.character(names[,1])), split = ".sorted.rmdup.bam"))
split = strsplit(names, "_")
pops <- data.frame(names[1:95], do.call(rbind, split[1:95]))
names(pops) = c("Ind", "Pop", "Row", "Col")
angsd_coords <- merge(pops, coords, by.x="Ind", by.y="Tree")
points <- SpatialPoints(angsd_coords[c("Longitude","Latitude")])
clim <- extract(bio,points)
angsd_coords_clim <- cbind.data.frame(angsd_coords,clim)
str(angsd_coords_clim)
clim_PCA = PCA(angsd_coords_clim[,15:33], graph=T)
fviz_eig(clim_PCA)
fviz_pca_biplot(clim_PCA,
geom.ind="point",
col.ind = angsd_coords_clim$Latitude,
gradient.cols = c("#00AFBB", "#E7B800", "#FC4E07"),
title="Climate PCA (Bioclim)",
legend.title="Latitude")
dimdesc(clim_PCA)[1:2]
head(coords)
dim(coords)
head(pops)
head(points)
head(clim)
clim_PCA = PCA(angsd_coords_clim[,15:33], graph=T)
fviz_eig(clim_PCA)
fviz_pca_biplot(clim_PCA,
geom.ind="point",
col.ind = angsd_coords_clim$Latitude,
gradient.cols = c("#00AFBB", "#E7B800", "#FC4E07"),
title="Climate PCA (Bioclim)",
legend.title="Latitude")
fviz_pca_biplot(clim_PCA,
geom.ind="point",
col.ind = angsd_coords_clim$Latitude,
gradient.cols = c("#00AFBB", "#E7B800", "#FC4E07"),
title="Climate PCA (Bioclim)",
legend.title="Latitude")
fviz_eig(clim_PCA)
clim_PCA = PCA(angsd_coords_clim[,15:33], graph=T)
fviz_eig(clim_PCA)
fviz_pca_biplot(clim_PCA,
geom.ind="point",
col.ind = angsd_coords_clim$Latitude,
gradient.cols = c("#00AFBB", "#E7B800", "#FC4E07"),
title="Climate PCA (Bioclim)",
legend.title="Latitude")
dimdesc(clim_PCA)[1:2]
write.table(scale(angsd_coords_clim["bio12"]),
"allRS_bio12.txt",
sep="\t",
quote=F,
row.names = F,
col.names=F)
write.table(scale(angsd_coords_clim["bio10"]),
"allRS_bio10.txt",
sep="\t",
quote=F,
row.names = F,
col.names=F)
